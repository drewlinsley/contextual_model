#------------------------------------------------------------------------------#
_DEFAULT_TB2015PP_CVAL = 0.5
_DEFAULT_TB2015PP_SIZE = 51
_DEFAULT_TB2015PP_CSIZE = 9
_DEFAULT_TB2015PP_SCALE = 2.0 # works with 1.
_DEFAULT_TB2015PP_NPOINTS = 32
_DEFAULT_TB2015PP_CSVFILES = [[
    '/home/dmely/src/hmax/models/ucircuits/contextual' + \
    '/data/TB2015_%i_%s.csv' % (i, s) \
    for i in range(-90, 90, 30)] for s in ('PS', 'PO')
]

def _plot_TrottBorn2015_population_plaid_data(
    ax=None,
    npoints=_DEFAULT_TB2015PP_NPOINTS,
    csvfiles=_DEFAULT_TB2015PP_CSVFILES):
    """"""

    try:
        assert len(ax) == 6
    except TypeError:
        fig, ax = plt.subplots(1, 6)

    # get digitized data points
    ###########################
    ps_x = sp.zeros((6, 7))
    ps_y = sp.zeros((6, 7))
    po_x = sp.zeros((6, 7))
    po_y = sp.zeros((6, 7))
    c2c1 = sp.linspace(-90, 60, 6)

    # load and wrap first point (x-wise) to last position
    for idx, (csv_ps, csv_po) in enumerate(zip(*csvfiles)):
        ps_x[idx, :-1], ps_y[idx, :-1] = \
            sp.genfromtxt(csv_ps, delimiter=',').T
        po_x[idx, :-1], po_y[idx, :-1] = \
            sp.genfromtxt(csv_po, delimiter=',').T
        ps_x[idx, -1] = 90
        po_x[idx, -1] = 90
        ps_y[idx, -1] = ps_y[idx, 0]
        po_y[idx, -1] = po_y[idx, 0]

    # decoded mean vectors, digitized from the paper
    do = sp.array([16.67, -27.13, -12.57,  01.99,  22.50,  29.56])
    ds = sp.array([04.67, -11.25,  00.67,  06.61,  05.96,  10.51])

    # fit: define parametric curve (Eq. 2, Trott & Born 2015)
    #########################################################

    # first estimate dispersion from special case
    # (same ori, plaid-only; see paper for details) ...
    i_nodiff = sp.where(c2c1 == 0)[0][0]
    def R_0(t_deg, w, k, kappa):
        t_rad = t_deg / 180. * sp.pi
        T0 = stats.vonmises.pdf(t_rad*2.0,
            loc=0.0, scale=1.0, kappa=kappa)
        T0 /= T0.max()
        return w * T0 - k
    _, _, kappa = curve_fit(R_0,
        xdata=po_x[i_nodiff], ydata=po_y[i_nodiff])[0]

    # ... then fit the rest
    def pf(theta_deg):
        def R_theta(t_deg, w1, w2, k):
            t_rad = t_deg / 180. * sp.pi
            theta_rad = theta_deg / 180. * sp.pi
            T0 = stats.vonmises.pdf(t_rad*2.0,
                loc=0.0, scale=1.0, kappa=kappa)
            Tt = stats.vonmises.pdf(t_rad*2.0,
                loc=theta_rad*2.0, scale=1.0, kappa=kappa)
            T0 /= T0.max()
            Tt /= Tt.max()
            return w1 * T0 + w2 * Tt - k
        return R_theta

    po_par = sp.zeros((6, 3))
    ps_par = sp.zeros((6, 3))
    for theta, x_, y_, par in zip(c2c1, po_x, po_y, po_par):
        par[:], _ = curve_fit(pf(theta), xdata=x_, ydata=y_, maxfev=10**9)
    for theta, x_, y_, par in zip(c2c1, ps_x, ps_y, ps_par):
        par[:], _ = curve_fit(pf(theta), xdata=x_, ydata=y_, maxfev=10**9)

    po_fit = sp.zeros((6, npoints))
    ps_fit = sp.zeros((6, npoints))
    xx_rad = sp.linspace(-sp.pi, sp.pi, npoints)
    xx_deg = xx_rad / sp.pi * 90.
    for idx, (theta, par, fit) in enumerate(zip(c2c1, po_par, po_fit)):
        fit[:] = pf(theta)(xx_deg, *par)
    for idx, (theta, par, fit) in enumerate(zip(c2c1, ps_par, ps_fit)):
        fit[:] = pf(theta)(xx_deg, *par)

    # view data
    ###########
    xticks = sp.linspace(-90, 90, 7)
    for idx in range(6):
        # points
        ax[idx].plot(po_x[idx], po_y[idx],
            color=CELL_MARKERCOLOR,
            alpha=CELL_MARKERALPHA,
            linestyle='None',
            markersize=CELL_MARKERSIZE,
            marker='o')
        ax[idx].plot(ps_x[idx], ps_y[idx],
            color=CELL_MARKERCOLOR_RED,
            alpha=CELL_MARKERALPHA,
            linestyle='None',
            markersize=CELL_MARKERSIZE,
            marker='o')

        # fits
        ax[idx].plot(xx_deg, po_fit[idx],
            color=CELL_LINECOLOR,
            alpha=CELL_LINEALPHA,
            markersize=0,
            label='Plaid only',
            linestyle='-',
            linewidth=CELL_LINEWIDTH)
        ax[idx].plot(xx_deg, ps_fit[idx],
            color=CELL_LINECOLOR_RED,
            alpha=CELL_LINEALPHA,
            markersize=0,
            label='Plaid only',
            linestyle='-',
            linewidth=CELL_LINEWIDTH)

        ax[idx].set_xlim([-90, 90])
        ax[idx].set_ylim([0.0, max(po_y.max(), ps_y.max())])
        ax[idx].set_xticks(xticks)

        # minima loci
        ax[idx].plot([do[idx]] * 2, list(ax[idx].get_ylim()),
            linestyle='--',
            color=CELL_LINECOLOR,
            alpha=CELL_LINEALPHA,
            linewidth=CELL_ABSCISSA_LW,
            markersize=0)
        ax[idx].plot([ds[idx]] * 2, list(ax[idx].get_ylim()),
            linestyle='--',
            color=CELL_LINECOLOR_RED,
            alpha=CELL_LINEALPHA,
            linewidth=CELL_ABSCISSA_LW,
            markersize=0)

    return

def TB2015_plaid(
    size=_DEFAULT_TB2015PP_SIZE,
    csize=_DEFAULT_TB2015PP_CSIZE,
    npoints=_DEFAULT_TB2015PP_NPOINTS,
    scale=_DEFAULT_TB2015PP_SCALE,
    cval=_DEFAULT_TB2015PP_CVAL):
    """
    """

    BUFFERFILE = '/home/dmely/data/buffer_tb2015_plaid_cs5.h5'

    # map to a sine for the visualizations
    m = (lambda x: sp.sin(sp.pi * x))

    # simulate populations
    ppop = {
        'kind': 'circular',
        'npoints': npoints,
        'scale': scale,
        'fdomain': (0, 1),
    }

    vals_ang = sp.array([-90., -60., -30., 0., 30., 60.])
    vals = (vals_ang + 90.)/180.
    imc1 = stim.get_center_surround(
        size=size, csize=csize, cval=cval, sval=sp.nan)
    x1 = utils.get_population(imc1, **ppop)
    x = sp.zeros((2, len(vals), npoints, size, size))
    
    for vdx, v in enumerate(vals):
        imc2 = stim.get_center_surround(
            size=size, csize=csize, cval=v, sval=sp.nan)
        ims = stim.get_center_surround(
            size=size, csize=csize, cval=sp.nan, sval=v)
        x2 = utils.get_population(imc2, **ppop)
        xs = utils.get_population(ims, **ppop)
        x[0, vdx] = (x1 + x2)/2.
        x[1, vdx] = (x1 + x2)/2. + xs
    x.shape = (2 * len(vals), npoints, size, size)

    try:
        with h5py.File(BUFFERFILE, 'r') as h5f:
            pr = h5f['pr'][:]

    except IOError:
        with ContextualCircuit(input_shape=x.shape,
            keeptime=False, i_gpu=_I_GPU) as cx:
            cx.run(x, from_gpu=False)
            pr = cx.Y[..., size//2, size//2].get()
            pr.shape = (2, len(vals), npoints)

        with h5py.File(BUFFERFILE) as h5f:
            h5f['pr'] = pr

    # display population responses for plaids and surrounds
    # raw_input("[Populations] Press Enter to continue.")
    xticks = sp.array([-90., -60., -30., 0., 30., 60., 90.])
    allx = sp.linspace(xticks.min(), xticks.max(), npoints)
    
    fig, ax = plt.subplots(2, len(vals))
    ax_dat = ax[0, :]
    ax_sim = ax[1, :]

    # plot digitized data
    _plot_TrottBorn2015_population_plaid_data(ax=ax_dat)

    d0 = utils.decode(pr[0], axis=-1, kind='circular_vote')
    d1 = utils.decode(pr[1], axis=-1, kind='circular_vote')
    d0_x = d0 * (xticks.max()-xticks.min())+xticks.min()
    d1_x = d1 * (xticks.max()-xticks.min())+xticks.min()

    # plot simulated
    for i in range(len(vals)):
        # population curve
        ax_sim[i].plot(allx, pr[0, i],
            color=CELL_LINECOLOR,
            alpha=CELL_LINEALPHA,
            markersize=0,
            label='Plaid only',
            linestyle='-',
            linewidth=CELL_LINEWIDTH)

        ax_sim[i].plot(allx[::iceil(npoints/6.)], pr[0, i][::iceil(npoints/6.)],
            color=CELL_MARKERCOLOR,
            alpha=CELL_MARKERALPHA,
            linestyle='None',
            markersize=CELL_MARKERSIZE,
            marker='o')

        ax_sim[i].plot(allx, pr[1, i],
            color=CELL_LINECOLOR_RED,
            alpha=CELL_LINEALPHA,
            markersize=0,
            label='Plaid + Surround',
            linestyle='-',
            linewidth=CELL_LINEWIDTH)

        ax_sim[i].plot(allx[::iceil(npoints/6.)], pr[1, i][::iceil(npoints/6.)],
            color=CELL_MARKERCOLOR_RED,
            alpha=CELL_MARKERALPHA,
            linestyle='None',
            markersize=CELL_MARKERSIZE,
            marker='o')
        ax_sim[i].set_ylim([0.0, pr.max()])

        # misc
        ax_sim[i].set_xticks(xticks)
        ax_sim[i].set_xticklabels('%i' % (i,) for i in xticks)
        ax_sim[i].set_xlim((xticks.min(), xticks.max()))

        if not PUBLISH:
            if xticks[i] < 0:
                tt = 'C2 = C1 - %i deg.' % (sp.absolute(xticks[i]),)
            elif xticks[i] > 0:
                tt = 'C2 = C1 + %i deg.' % (sp.absolute(xticks[i]),)
            else:
                tt = 'C2 = C1'
            ax_dat[i].set_title(tt, fontweight='bold', fontsize=15.)
            ax_sim[i].set_xlabel('Orientation\n(relative to preferred)',
                fontweight='bold', fontsize=15.)

            if i == 0:
                ax_dat[i].set_ylabel(
                    'Population Response (normalized)',
                    fontweight='bold', fontsize=15.)
                ax_sim[i].set_ylabel(
                    'Population Response (arbitrary units)',
                    fontweight='bold', fontsize=15.)
            if i == len(vals)-1:
                ax_dat[i].yaxis.set_label_position('right')
                ax_sim[i].yaxis.set_label_position('right')
                ax_dat[i].set_ylabel(
                    'Experimental data (neurophysiology)',
                    fontweight='bold', fontsize=15.)
                ax_sim[i].set_ylabel(
                    'Model simulation',
                    fontweight='bold', fontsize=15.)
            # ax_sim[i].patch.set_alpha(0.0)

    for i in range(6):
        if PUBLISH:
            ax_dat[i].set_xticklabels([])
            ax_dat[i].set_yticklabels([])
            ax_sim[i].set_xticklabels([])
            ax_sim[i].set_yticklabels([])

        ax_sim[i].set_xlim((-93, 93))
        ax_dat[i].set_xlim((-93, 93))

        # minima loci
        ax_sim[i].plot([d0_x[i]]*2, list(ax_sim[i].get_ylim()),
            color=CELL_LINECOLOR,
            alpha=CELL_LINEALPHA,
            linewidth=CELL_ABSCISSA_LW,
            linestyle='--')
        ax_sim[i].plot([d1_x[i]]*2, list(ax_sim[i].get_ylim()),
            color=CELL_LINECOLOR_RED,
            alpha=CELL_LINEALPHA,
            linewidth=CELL_ABSCISSA_LW,
            linestyle='--')        

    if PUBLISH:
        CELLFIG(fig=fig, out='/home/dmely/data/cell.out/fig_tb15_pl.pdf')

    return pr